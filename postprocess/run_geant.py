#!/usr/bin/env python

import os
import sys 
import shutil
from replace import *
import matplotlib 
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
matplotlib.rcParams.update({'font.size': 22})
from pathlib import Path,PurePath
import glob
import csv
import time 


from plot_spectrum import plot_spectrum 
from read_geant_output import get_triton_yield,get_edep 

'''
run multiple instances of Frog using different random numbers
then combine results ( # neutrons in target +/- x, secondary neutrons/tritons spectra and energy deposited in LiD)
'''
#-----------------
def get_abs_flux(position):
    '''get the total flux for a given position'''
    xls = pd.ExcelFile('atr_spectrum/{}_Spectrum_Mod_Scope.xlsx'.format(position))
    df = pd.read_excel(xls,'Aluminum')
    spectrum = df['percent_shield_thickness_001'].to_numpy(dtype=np.float32)
    return sum(spectrum)
#-----------------
def get_frac_spectrum_atr(position,energy_cutoff):
    '''get the neutron yield for a given position and energy cutoff'''
    xls = pd.ExcelFile('atr_spectrum/{}_Spectrum_Mod_Scope.xlsx'.format(position))
    df = pd.read_excel(xls,'Aluminum')
    spectrum = df['percent_shield_thickness_001'].to_numpy(dtype=np.float32)
    n = sum(df[df['Unnamed: 0'] > energy_cutoff ]['percent_shield_thickness_001'])
    return n/sum(spectrum)
#-----------------


if __name__ == "__main__":

    # main input options controlling the simulation 
    number_of_runs = 1
    number_of_primary_neutrons = 1e8
    run_geant = True  
    use_pbs = True # all calculations will be performed in parallel
    postprocess_geant = False 
    assert not (run_geant&postprocess_geant), 'cannot set run_geant and postprocess to true'  
    energy_cutoff = 0.5 # MeV - for defining yield
    material_list = ['Li6D','LiD']
    thickness_mm={}
    thickness_mm['Li6D'] = 1.
    thickness_mm['LiD'] = 2. 
    #[Li6AlD4','LiAlD4','He3D2_1','He3D2_2','He3D2_3',
    #'LiOD_D2O_10','LiOD_D2O_20','LiOD_D2O_30',
    #'Li6OD_D2O_10','Li6OD_D2O_20','Li6OD_D2O_30',

    position_list =  ['A11','NEFT','B5','B11','I14','I11','OS5','OS15']

    # CSV generated by Geant4 
    #output_files = ['spectrum_h1_14.csv','spectrum_h1_15.csv','spectrum_h1_16.csv','spectrum_h1_17.csv','spectrum_h1_18.csv']
    mac_template = 'neutron_on_LiD_template.mac'
    pbs_template = 'frog_template.pbs'

    if postprocess_geant:
        # csv generated by this script 
        f1 = open('results_yield_{:.1f}.csv'.format(energy_cutoff),'w')
        writer1 = csv.writer(f1)
        columns=['position','material',
                'converter',
                'D-T ', 
                'Li-T', 
                'triton',  
                'energy deposition in LiD', 
                'flux']
        writer1.writerow(columns)

        f2 = open('results_flux_{:.1f}.csv'.format(energy_cutoff),'w')
        writer2 = csv.writer(f2)
        columns=['position','material',
                'ATR', 
                'converter',
                'increase (%)']
        writer2.writerow(columns)

    #--------
    #loop over positions 
    #--------

    for position in position_list:
        print ('position = {}'.format(position))

        #-------
        # loop over materials 
        #-------
        
        for material in material_list:
            print ('material = {}'.format(material))
            base_pwd = Path.cwd()


            #delete existing files if geant is run
            #rundir =  base_pwd / 'run_{}'.format(material)
            # if run_geant and os.path.exists(rundir):
            #     print ('removing run dir')
            #     shutil.rmtree(rundir)
                
            #initialize random number generator
            rng = np.random.default_rng(2024)

            #read from the output files
            triton_yield = [] # number of tritons generated in LiD
            energy_deposition = [] #  energy deposited per primary neutrons in LiD


            for run in range(number_of_runs):

                rundir = base_pwd / '{}'.format(material) / position

                Path.mkdir(rundir,parents=True,exist_ok=True)
                mac_input_ = 'neutron_on_LiD_{}.mac'.format(run)
                mac_input  = rundir/mac_input_
                pbs_input  = rundir/'frog_{}.pbs'.format(run) 
                out        = 'neutron_on_LiD_{}.out'.format(run)

                shutil.copy(mac_template,mac_input)
                shutil.copy(pbs_template,pbs_input)
                [int1,int2] = rng.integers(1e9,size=2)
                #update macro file
                change_input = []
                change_input.append(('random1',int1))
                change_input.append(('random2',int2))
                change_input.append(('number_of_primary_neutrons','{:.0f}'.format(number_of_primary_neutrons)))
                change_input.append(('hist_ene.txt','hist_ene_{}.txt'.format(position)))
                change_input.append(('breeder_material',material))
                change_input.append(('breeder_thickness',thickness_mm[material]))
                radius = 7+thickness_mm[material] # 5 mm inner radius, 1 mm inner/outer cladding
                change_input.append(('source_radius',radius))
                halfz = 27+thickness_mm[material]
                change_input.append(('source_halfz',halfz))
                change_input.append(('spectrum_name','spectrum_{}'.format(run)))
                replace_txt(mac_input,change_input)
                #update pbs script 
                change_input = []
                cmd = ' {} >& {}'.format(mac_input_,out)
                change_input.append(('template_mac',cmd))
                
                replace_txt(pbs_input,change_input)
                os.chdir(rundir)
                #-------------
                if run_geant:
                    if use_pbs:
                        os.system('qsub {}'.format(pbs_input))                   
                    else:
                        t_start = time.time()
                        print ('running case number {}'.format(run))
                        os.system('../../../build/frog {} >& {}'.format(mac_input,out))
                        t_end = time.time() 
                        print ('total time to run geant = {:.1f} s'.format(t_end-t_start))
                # if postprocess_geant:
                #     # rename csv files
                #     for file in output_files:
                #         new_name = file[:-4]+'_{}.csv'.format(run)
                #         shutil.move(file,new_name)
                #-------------
                if postprocess_geant:
                    n,q = get_triton_yield(out)
                    triton_yield.append(n)
                    energy_deposition.append(get_edep(out))

                os.chdir(base_pwd)

            if postprocess_geant:
                # now post-process results 
                tot_flux = get_abs_flux(position)
                n_neutrons_DT,n_neutrons_TLi,spectrum_in_target = plot_spectrum(rundir,number_of_primary_neutrons,energy_cutoff,position,tot_flux)

                n_neutrons_DT /= number_of_primary_neutrons
                neutrons_DT_yield_mean = np.mean(n_neutrons_DT)
                neutrons_DT_yield_std  = np.std(n_neutrons_DT)

                n_neutrons_TLi /= number_of_primary_neutrons
                neutrons_TLi_yield_mean = np.mean(n_neutrons_TLi)
                neutrons_TLi_yield_std  = np.std(n_neutrons_TLi)

                triton_yield = np.array(triton_yield) / number_of_primary_neutrons
                energy_depositon = np.array(energy_deposition) # already normalized per primary particle

                triton_yield_mean = np.mean(triton_yield)
                triton_yield_std = np.std(triton_yield)

                edep_mean = np.mean(energy_deposition)
                edep_std = np.std(energy_deposition)

                #print result per run - for debugging 

                # with open('results_per_run_{}_{}_{:.1f}.csv'.format(material,position,energy_cutoff),'w',newline='') as file:
                #     writer3 = csv.writer(file)
                #     columns=['run','D-T','Li-T','tritons','energy deposition in LiD']
                #     writer3.writerow(columns)
                #     for run in range(number_of_runs):
                #         writer3.writerow([run,n_neutrons_DT[run],n_neutrons_TLi[run],triton_yield[run],energy_deposition[run]])
                    

                # results_yield_cutoff.csv       
                spectrum_atr =get_frac_spectrum_atr(position,energy_cutoff)
                converter_yield = neutrons_DT_yield_mean + neutrons_TLi_yield_mean
                
                writer1.writerow([position,
                                material,
                                converter_yield,
                                neutrons_DT_yield_mean,
                                neutrons_TLi_yield_mean,
                                triton_yield_mean,
                                edep_mean,
                                tot_flux])
                if spectrum_atr!=0.:   
                    increase = (spectrum_in_target/spectrum_atr-1.)
                else:
                    increase = 'n/a'

                writer2.writerow([position,
                                material,
                                spectrum_atr,#*tot_flux ,
                                spectrum_in_target,#*tot_flux ,
                                increase])
    if postprocess_geant:
        f1.close()
        f2.close()
        